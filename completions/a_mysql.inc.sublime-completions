{
	"scope": "source.pawn - variable.other.pawn",
	"completions":
	[
		"mysql_included",
		"ER_DBACCESS_DENIED_ERROR",
		"ER_ACCESS_DENIED_ERROR",
		"ER_UNKNOWN_TABLE",
		"ER_SYNTAX_ERROR",
		"CR_SERVER_GONE_ERROR",
		"CR_SERVER_LOST",
		"CR_COMMAND_OUT_OF_SYNC",
		"CR_SERVER_LOST_EXTENDED",
		"MYSQL_DEFAULT_HANDLE",
		"MYSQL_INVALID_HANDLE",
		"MYSQL_INVALID_CACHE",
		"MYSQL_INVALID_ORM",
		"DUPLICATE_CONNECTIONS",
		"DUPLICATE_CONNECTION_WARNING",
		"ERROR_INVALID",
		"ERROR_OK",
		"ERROR_NO_DATA",
		"NONE",
		"DEBUG",
		"INFO",
		"WARNING",
		"ERROR",
		"ALL",
		"MYSQL_TYPE_INVALID",
		"MYSQL_TYPE_DECIMAL",
		"MYSQL_TYPE_TINY",
		"MYSQL_TYPE_SHORT",
		"MYSQL_TYPE_LONG",
		"MYSQL_TYPE_FLOAT",
		"MYSQL_TYPE_DOUBLE",
		"MYSQL_TYPE_NULL",
		"MYSQL_TYPE_TIMESTAMP",
		"MYSQL_TYPE_LONGLONG",
		"MYSQL_TYPE_INT24",
		"MYSQL_TYPE_DATE",
		"MYSQL_TYPE_TIME",
		"MYSQL_TYPE_DATETIME",
		"MYSQL_TYPE_YEAR",
		"MYSQL_TYPE_NEWDATE",
		"MYSQL_TYPE_VARCHAR",
		"MYSQL_TYPE_BIT",
		"MYSQL_TYPE_TIMESTAMP2",
		"MYSQL_TYPE_DATETIME2",
		"MYSQL_TYPE_TIME2",
		"MYSQL_TYPE_JSON",
		"MYSQL_TYPE_NEWDECIMAL",
		"MYSQL_TYPE_ENUM",
		"MYSQL_TYPE_SET",
		"MYSQL_TYPE_TINY_BLOB",
		"MYSQL_TYPE_MEDIUM_BLOB",
		"MYSQL_TYPE_LONG_BLOB",
		"MYSQL_TYPE_BLOB",
		"MYSQL_TYPE_VAR_STRING",
		"MYSQL_TYPE_STRING",
		"MYSQL_TYPE_GEOMETRY",
		"MILLISECONDS",
		"MICROSECONDS",
		{"trigger": "orm_create", "contents": "orm_create(${1:const table[]}, ${2:MySQL:handle = MYSQL_DEFAULT_HANDLE})"},
		{"trigger": "orm_destroy", "contents": "orm_destroy(${1:ORM:id})"},
		{"trigger": "orm_errno", "contents": "orm_errno(${1:ORM:id})"},
		{"trigger": "orm_apply_cache", "contents": "orm_apply_cache(${1:ORM:id}, ${2:row_idx}, ${3:result_idx = 0})"},
		{"trigger": "orm_select", "contents": "orm_select(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})"},
		{"trigger": "orm_update", "contents": "orm_update(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})"},
		{"trigger": "orm_insert", "contents": "orm_insert(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})"},
		{"trigger": "orm_delete", "contents": "orm_delete(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})"},
		{"trigger": "orm_load", "contents": "orm_load(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})"},
		{"trigger": "orm_save", "contents": "orm_save(${1:ORM:id}, ${2:const callback[] = \"\"}, ${3:const format[] = \"\"}, ${4:{Float, _}:...})"},
		{"trigger": "orm_addvar_int", "contents": "orm_addvar_int(${1:ORM:id}, ${2:var}, ${3:const columnname[]})"},
		{"trigger": "orm_addvar_float", "contents": "orm_addvar_float(${1:ORM:id}, ${2:Float:var}, ${3:const columnname[]})"},
		{"trigger": "orm_addvar_string", "contents": "orm_addvar_string(${1:ORM:id}, ${2:var[]}, ${3:var_maxlen}, ${4:const columnname[]})"},
		{"trigger": "orm_clear_vars", "contents": "orm_clear_vars(${1:ORM:id})"},
		{"trigger": "orm_delvar", "contents": "orm_delvar(${1:ORM:id}, ${2:const columnname[]})"},
		{"trigger": "orm_setkey", "contents": "orm_setkey(${1:ORM:id}, ${2:const columnname[]})"},
		{"trigger": "mysql_log", "contents": "mysql_log(${1:E_LOGLEVEL:loglevel = ERROR | WARNING})"},
		{"trigger": "mysql_connect", "contents": "mysql_connect(${1:const host[]}, ${2:const user[]}, ${3:const password[]}, ${4:const database[]}, ${5:MySQLOpt:option_id = MySQLOpt:0})"},
		{"trigger": "mysql_connect_file", "contents": "mysql_connect_file(${1:const file_name[] = \"mysql.ini\"})"},
		{"trigger": "mysql_close", "contents": "mysql_close(${1:MySQL:handle = MYSQL_DEFAULT_HANDLE})"},
		{"trigger": "mysql_unprocessed_queries", "contents": "mysql_unprocessed_queries(${1:MySQL:handle = MYSQL_DEFAULT_HANDLE})"},
		{"trigger": "mysql_global_options", "contents": "mysql_global_options(${1:E_MYSQL_GLOBAL_OPTION:type}, ${2:value})"},
		{"trigger": "mysql_init_options", "contents": "mysql_init_options()"},
		{"trigger": "mysql_set_option", "contents": "mysql_set_option(${1:MySQLOpt:option_id}, ${2:E_MYSQL_OPTION:type}, ${3:{Float, _}:...})"},
		{"trigger": "mysql_pquery", "contents": "mysql_pquery(${1:MySQL:handle}, ${2:const query[]}, ${3:const callback[] = \"\"}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})"},
		{"trigger": "mysql_tquery", "contents": "mysql_tquery(${1:MySQL:handle}, ${2:const query[]}, ${3:const callback[] = \"\"}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})"},
		{"trigger": "mysql_query", "contents": "mysql_query(${1:MySQL:handle}, ${2:const query[]}, ${3:bool:use_cache = true})"},
		{"trigger": "mysql_tquery_file", "contents": "mysql_tquery_file(${1:MySQL:handle}, ${2:const file_path[]}, ${3:const callback[] = \"\"}, ${4:const format[] = \"\"}, ${5:{Float, _}:...})"},
		{"trigger": "mysql_query_file", "contents": "mysql_query_file(${1:MySQL:handle}, ${2:const file_path[]}, ${3:bool:use_cache = false})"},
		{"trigger": "mysql_errno", "contents": "mysql_errno(${1:MySQL:handle = MYSQL_DEFAULT_HANDLE})"},
		{"trigger": "mysql_error", "contents": "mysql_error(${1:destination[]}, ${2:max_len = sizeof(destination})"},
		{"trigger": "mysql_escape_string", "contents": "mysql_escape_string(${1:const source[]}, ${2:destination[]}, ${3:max_len = sizeof(destination})"},
		{"trigger": "mysql_format", "contents": "mysql_format(${1:MySQL:handle}, ${2:output[]}, ${3:max_len}, ${4:const format[]}, ${5:{Float, _}:...})"},
		{"trigger": "mysql_set_charset", "contents": "mysql_set_charset(${1:const charset[]}, ${2:MySQL:handle = MYSQL_DEFAULT_HANDLE})"},
		{"trigger": "mysql_get_charset", "contents": "mysql_get_charset(${1:destination[]}, ${2:max_len = sizeof(destination})"},
		{"trigger": "mysql_stat", "contents": "mysql_stat(${1:destination[]}, ${2:max_len = sizeof(destination})"},
		{"trigger": "cache_num_rows", "contents": "cache_num_rows()"},
		{"trigger": "cache_num_fields", "contents": "cache_num_fields()"},
		{"trigger": "cache_num_results", "contents": "cache_num_results()"},
		{"trigger": "cache_get_row_count", "contents": "cache_get_row_count(${1:destination})"},
		{"trigger": "cache_get_field_count", "contents": "cache_get_field_count(${1:destination})"},
		{"trigger": "cache_get_result_count", "contents": "cache_get_result_count(${1:destination})"},
		{"trigger": "cache_get_field_name", "contents": "cache_get_field_name(${1:field_index}, ${2:destination[]}, ${3:max_len = sizeof(destination})"},
		{"trigger": "cache_get_field_type", "contents": "cache_get_field_type(${1:field_index})"},
		{"trigger": "cache_set_result", "contents": "cache_set_result(${1:result_index})"},
		{"trigger": "cache_get_value_index", "contents": "cache_get_value_index(${1:row_idx}, ${2:column_idx}, ${3:destination[]}, ${4:max_len = sizeof(destination)})"},
		{"trigger": "cache_get_value_index_int", "contents": "cache_get_value_index_int(${1:row_idx}, ${2:column_idx}, ${3:destination})"},
		{"trigger": "cache_get_value_index_bool", "contents": "cache_get_value_index_bool(${1:row_idx}, ${2:column_idx}, ${3:&bool:destination})"},
		{"trigger": "cache_get_value_index_float", "contents": "cache_get_value_index_float(${1:row_idx}, ${2:column_idx}, ${3:Float:destination})"},
		{"trigger": "cache_is_value_index_null", "contents": "cache_is_value_index_null(${1:row_idx}, ${2:column_idx}, ${3:bool:destination})"},
		{"trigger": "cache_get_value_name", "contents": "cache_get_value_name(${1:row_idx}, ${2:const column_name[]}, ${3:destination[]}, ${4:max_len = sizeof(destination})"},
		{"trigger": "cache_get_value_name_int", "contents": "cache_get_value_name_int(${1:row_idx}, ${2:const column_name[]}, ${3:destination})"},
		{"trigger": "cache_get_value_name_bool", "contents": "cache_get_value_name_bool(${1:row_idx}, ${2:column_name[]}, ${3:&bool:destination})"},
		{"trigger": "cache_get_value_name_float", "contents": "cache_get_value_name_float(${1:row_idx}, ${2:const column_name[]}, ${3:Float:destination})"},
		{"trigger": "cache_is_value_name_null", "contents": "cache_is_value_name_null(${1:row_idx}, ${2:const column_name[]}, ${3:bool:destination})"},
		{"trigger": "cache_save", "contents": "cache_save()"},
		{"trigger": "cache_delete", "contents": "cache_delete(${1:Cache:cache_id})"},
		{"trigger": "cache_set_active", "contents": "cache_set_active(${1:Cache:cache_id})"},
		{"trigger": "cache_unset_active", "contents": "cache_unset_active()"},
		{"trigger": "cache_is_any_active", "contents": "cache_is_any_active()"},
		{"trigger": "cache_is_valid", "contents": "cache_is_valid(${1:Cache:cache_id})"},
		{"trigger": "cache_affected_rows", "contents": "cache_affected_rows()"},
		{"trigger": "cache_insert_id", "contents": "cache_insert_id()"},
		{"trigger": "cache_warning_count", "contents": "cache_warning_count()"},
		{"trigger": "cache_get_query_exec_time", "contents": "cache_get_query_exec_time(${1:E_MYSQL_EXECTIME_UNIT:unit = MICROSECONDS})"},
		{"trigger": "cache_get_query_string", "contents": "cache_get_query_string(${1:destination[]}, ${2:max_len = sizeof(destination})"},
		{"trigger": "OnQueryError", "contents": "OnQueryError(${1:errorid}, ${2:const error[]}, ${3:const callback[]}, ${4:const query[]}, ${5:MySQL:handle})"}
	]
}
